Игра подберите пару
без pictureBox и Resources

using System;
using System.Drawing;
using System.Windows.Forms;

public class MemoryGame : Form
{
    // Константы
    private const int ROWS = 3;        // Количество рядов
    private const int COLS = 4;        // Количество столбцов
    private const int PAIRS_COUNT = 6; // Количество пар картинок

    // Переменные для хранения состояния игры
    private Button[,] buttons;         // Массив кнопок для карт
    private int[] values;              // Значения карт (1-6 повторяются)
    private bool[] foundPairs;         // Найденные пары
    private int firstSelected = -1;    // Индекс первой открытой карты
    private int secondSelected = -1;   // Индекс второй открытой карты
    private bool isProcessing = false; // Флаг блокировки обработки кликов

    public MemoryGame()
    {
        // Настройка формы
        Text = "Игра \"Подберите пару\"";
        ClientSize = new Size(600, 450);
        
        // Создание таблицы для размещения кнопок
        TableLayoutPanel tableLayoutPanel = new TableLayoutPanel();
        tableLayoutPanel.Dock = DockStyle.Fill;
        tableLayoutPanel.RowCount = ROWS;
        tableLayoutPanel.ColumnCount = COLS;
        
        // Настройка размеров ячеек
        for (int i = 0; i < ROWS; i++)
            tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 33.33F));
        for (int i = 0; i < COLS; i++)
            tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25));

        // Создание массива кнопок
        buttons = new Button[ROWS, COLS];
        values = new int[ROWS * COLS];
        foundPairs = new bool[PAIRS_COUNT];

        // Инициализация игры
        InitializeGame();

        // Заполнение таблицы кнопками
        for (int row = 0; row < ROWS; row++)
        {
            for (int col = 0; col < COLS; col++)
            {
                int index = row * COLS + col;
                buttons[row, col] = CreateButton(index);
                tableLayoutPanel.Controls.Add(buttons[row, col], col, row);
            }
        }

        Controls.Add(tableLayoutPanel);
    }

    private Button CreateButton(int index)
    {
        Button btn = new Button();
        btn.Tag = index;
        btn.Size = new Size(80, 80);
        btn.FlatStyle = FlatStyle.Flat;
        btn.FlatAppearance.BorderSize = 2;
        btn.FlatAppearance.BorderColor = Color Gray;
        btn.BackColor = Color LightGray;
        btn.Click += Btn_Click;
        return btn;
    }

    private void InitializeGame()
    {
        // Создание массива значений (6 пар)
        int[] pairs = { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6 };
        
        // Перемешивание значений
        Random rand = new Random();
        for (int i = 0; i < values.Length; i++)
        {
            int randomIndex = rand.Next(values.Length);
            values[i] = pairs[randomIndex];
            pairs[randomIndex] = pairs[i];
        }
    }

    private void Btn_Click(object sender, EventArgs e)
    {
        if (isProcessing) return;

        Button clickedBtn = (Button)sender;
        int index = (int)clickedBtn.Tag;

        if (firstSelected == -1)
        {
            // Первая карта
            firstSelected = index;
            ShowCard(clickedBtn, firstSelected);
        }
        else if (secondSelected == -1 && firstSelected != index)
        {
            // Вторая карта
            secondSelected = index;
            ShowCard(clickedBtn, secondSelected);

            // Проверка совпадения
            CheckMatch(firstSelected, secondSelected);
        }
    }

    private void ShowCard(Button btn, int index)
    {
        btn.BackColor = Color.White;
        btn.Text = values[index].ToString();
    }

    private async void CheckMatch(int firstIndex, int secondIndex)
    {
        isProcessing = true;

        await Task.Delay(1000); // Задержка для просмотра карт

        if (values[firstIndex] == values[secondIndex])
        {
            // Совпадение найдено
            foundPairs[values[firstIndex] - 1] = true;
            buttons[firstIndex / COLS, firstIndex % COLS].Enabled = false;
            buttons[secondIndex / COLS, secondIndex % COLS].Enabled = false;

            // Проверка победы
            if (IsGameWon())
            {
                MessageBox.Show("Поздравляем! Вы выиграли!");
                ResetGame();
            }
        }
        else
        {
            // Не совпадение
            HideCards(firstIndex, secondIndex);
        }

        firstSelected = -1;
        secondSelected = -1;
        isProcessing = false;
    }

    private void HideCards(int firstIndex, int secondIndex)
    {
        buttons[firstIndex / COLS, firstIndex % COLS].BackColor = Color.LightGray;
        buttons[firstIndex / COLS, firstIndex % COLS].Text = "";
        buttons[secondIndex / COLS, secondIndex % COLS].BackColor = Color.LightGray;
        buttons[secondIndex / COLS, secondIndex % COLS].Text = "";
    }

    private bool IsGameWon()
    {
        foreach (bool pairFound in foundPairs)
        {
            if (!pairFound) return false;
        }
        return true;
    }

    private void ResetGame()
    {
        InitializeGame();
        firstSelected = -1;
        secondSelected = -1;
        Array.Clear(foundPairs, 0, foundPairs.Length);
        
        for (int row = 0; row < ROWS; row++)
        {
            for (int col = 0; col < COLS; col++)
            {
                Button btn = buttons[row, col];
                btn.BackColor = Color.LightGray;
                btn.Text = "";
                btn.Enabled = true;
            }
        }
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new MemoryGame());
    }
}
******************************************************************

с использованием pictureBox

public class MemoryGame : Form
{
    private const int ROWS = 3;
    private const int COLS = 4;
    private const int PAIRS_COUNT = 6;

    private PictureBox[,] cards;
    private Image[] images;           // Массив изображений для пар
    private int[] values;             // Значения карт (1-6 повторяются)
    private bool[] foundPairs;        // Найденные пары
    private int firstSelected = -1;   // Индекс первой открытой карты
    private int secondSelected = -1;  // Индекс второй открытой карты
    private bool isProcessing = false;// Флаг блокировки обработки кликов

    public MemoryGame()
    {
        Text = "Игра \"Подберите пару\"";
        ClientSize = new Size(800, 600);

        // Инициализация массивов
        cards = new PictureBox[ROWS, COLS];
        images = new Image[PAIRS_COUNT];
        values = new int[ROWS * COLS];
        foundPairs = new bool[PAIRS_COUNT];

        InitializeImages();
        InitializeGame();

        CreateGameField();
    }

    private void InitializeImages()
    {
        // Загружаем изображения для каждой пары
        // Замените пути на реальные файлы с изображениями
        string[] imagePaths = new string[PAIRS_COUNT]
        {
            @"C:\Images\card1.png",
            @"C:\Images\card2.png",
            @"C:\Images\card3.png",
            @"C:\Images\card4.png",
            @"C:\Images\card5.png",
            @"C:\Images\card6.png"
        };

        for (int i = 0; i < PAIRS_COUNT; i++)
        {
            try
            {
                images[i] = System.Drawing.Image.FromFile(imagePaths[i]);
                // Изменяем размер изображения под размер карты
                Bitmap resized = new Bitmap(images[i], 120, 120);
                images[i] = resized;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка загрузки изображения {i + 1}: {ex.Message}");
                Application.Exit();
            }
        }
    }

    private void CreateGameField()
    {
        TableLayoutPanel tableLayoutPanel = new TableLayoutPanel();
        tableLayoutPanel.Dock = DockStyle.Fill;
        tableLayoutPanel.RowCount = ROWS;
        tableLayoutPanel.ColumnCount = COLS;

        // Настройка размеров ячеек
        for (int i = 0; i < ROWS; i++)
            tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 33.33F));
        for (int i = 0; i < COLS; i++)
            tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25));

        // Создание PictureBox для каждой карты
        for (int row = 0; row < ROWS; row++)
        {
            for (int col = 0; col < COLS; col++)
            {
                int index = row * COLS + col;
                cards[row, col] = CreatePictureBox(index);
                tableLayoutPanel.Controls.Add(cards[row, col], col, row);
            }
        }

        Controls.Add(tableLayoutPanel);
    }

    private PictureBox CreatePictureBox(int index)
    {
        PictureBox pictureBox = new PictureBox();
        pictureBox.Tag = index;
        pictureBox.Size = new Size(120, 120);
        pictureBox.SizeMode = PictureBoxSizeMode.StretchImage;
        pictureBox.BackColor = Color.LightGray;
        pictureBox.BorderStyle = BorderStyle.FixedSingle;
        pictureBox.Click += Card_Click;
        return pictureBox;
    }

    private void InitializeGame()
    {
        // Создание массива значений (6 пар)
        int[] pairs = { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6 };
        
        // Перемешивание значений
        Random rand = new Random();
        for (int i = 0; i < values.Length; i++)
        {
            int randomIndex = rand.Next(values.Length);
            values[i] = pairs[randomIndex];
            pairs[randomIndex] = pairs[i];
        }
    }

    private void Card_Click(object sender, EventArgs e)
    {
        if (isProcessing) return;

        PictureBox clickedPictureBox = (PictureBox)sender;
        int index = (int)clickedPictureBox.Tag;

        if (firstSelected == -1)
        {
            firstSelected = index;
            ShowCard(clickedPictureBox, firstSelected);
        }
        else if (secondSelected == -1 && firstSelected != index)
        {
            secondSelected = index;
            ShowCard(clickedPictureBox, secondSelected);

            CheckMatch(firstSelected, secondSelected);
        }
    }

    private void ShowCard(PictureBox pictureBox, int index)
    {
        pictureBox.Image = images[values[index] - 1];
    }

    private async void CheckMatch(int firstIndex, int secondIndex)
    {
        isProcessing = true;

        await Task.Delay(1000);

        if (values[firstIndex] == values[secondIndex])
        {
            foundPairs[values[firstIndex] - 1] = true;
            cards[firstIndex / COLS, firstIndex % COLS].Enabled = false;
            cards[secondIndex / COLS, secondIndex % COLS].Enabled = false;

            if (IsGameWon())
            {
                MessageBox.Show("Поздравляем! Вы выиграли!");
                ResetGame();
            }
        }
        else
        {
            HideCards(firstIndex, secondIndex);
        }

        firstSelected = -1;
        secondSelected = -1;
        isProcessing = false;
    }

    private void HideCards(int firstIndex, int secondIndex)
    {
        cards[firstIndex / COLS, firstIndex % COLS].Image = null;
        cards[secondIndex / COLS, secondIndex % COLS].Image = null;
    }

    private bool IsGameWon()
    {
        foreach (bool pairFound in foundPairs)
        {
            if (!pairFound) return false;
        }
        return true;
    }

    private void ResetGame()
    {
        InitializeGame();
        firstSelected = -1;
        secondSelected = -1;
        Array.Clear(foundPairs, 0, foundPairs.Length);

        for (int row = 0; row < ROWS; row++)
        {
            for (int col = 0; col < COLS; col++)
            {
                PictureBox pictureBox = cards[row, col];
                pictureBox.Image = null;
                pictureBox.Enabled = true;
            }
        }
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new MemoryGame());
    }
}

********************
Добавление в Resources
public class MemoryGame : Form
{
    private const int ROWS = 3;
    private const int COLS = 4;
    private const int PAIRS_COUNT = 6;

    private PictureBox[,] cards;
    private Image[] images;           // Массив изображений для пар
    private int[] values;             // Значения карт (1-6 повторяются)
    private bool[] foundPairs;        // Найденные пары
    private int firstSelected = -1;   // Индекс первой открытой карты
    private int secondSelected = -1;  // Индекс второй открытой карты
    private bool isProcessing = false;// Флаг блокировки обработки кликов

    public MemoryGame()
    {
        Text = "Игра \"Подберите пару\"";
        ClientSize = new Size(800, 600);

        // Инициализация массивов
        cards = new PictureBox[ROWS, COLS];
        images = new Image[PAIRS_COUNT];
        values = new int[ROWS * COLS];
        foundPairs = new bool[PAIRS_COUNT];

        InitializeImages();
        InitializeGame();

        CreateGameField();
    }

    private void InitializeImages()
    {
        // Загружаем изображения из ресурсов
        string[] resourceNames = new string[PAIRS_COUNT]
        {
            "Card1",
            "Card2",
            "Card3",
            "Card4",
            "Card5",
            "Card6"
        };

        for (int i = 0; i < PAIRS_COUNT; i++)
        {
            try
            {
                // Получаем изображение из ресурсов
                images[i] = Properties.Resources.ResourceManager.GetObject(resourceNames[i]) as Bitmap;
                
                if (images[i] != null)
                {
                    // Изменяем размер изображения под размер карты
                    Bitmap resized = new Bitmap(images[i], 120, 120);
                    images[i].Dispose(); // Освобождаем исходное изображение
                    images[i] = resized;
                }
                else
                {
                    throw new Exception($"Изображение {resourceNames[i]} не найдено в ресурсах");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка загрузки изображения {i + 1}: {ex.Message}");
                Application.Exit();
            }
        }
    }

    // Остальной код остается без изменений...
}

// В файле Program.cs оставляем неизменным:
[STAThread]
static void Main()
{
    Application.EnableVisualStyles();
    Application.SetCompatibleTextRenderingDefault(false);
    Application.Run(new MemoryGame());
}
*****************************************************
использовать Properties.Resources.paper
public class MemoryGame : Form
{
    private const int ROWS = 3;
    private const int COLS = 4;
    private const int PAIRS_COUNT = 6;
    
    // Используем один ресурс для всех карт
    private static readonly Image PaperImage = 
        Properties.Resources.paper ?? throw new InvalidOperationException("Ресурс paper не найден");

    private PictureBox[,] cards;
    private int[] values;             // Значения карт (1-6 повторяются)
    private bool[] foundPairs;        // Найденные пары
    private int firstSelected = -1;   // Индекс первой открытой карты
    private int secondSelected = -1;  // Индекс второй открытой карты
    private bool isProcessing = false;// Флаг блокировки обработки кликов

    public MemoryGame()
    {
        Text = "Игра \"Подберите пару\"";
        ClientSize = new Size(800, 600);

        // Инициализация массивов
        cards = new PictureBox[ROWS, COLS];
        values = new int[ROWS * COLS];
        foundPairs = new bool[PAIRS_COUNT];

        InitializeGame();
        CreateGameField();
    }

    private void CreateGameField()
    {
        TableLayoutPanel tableLayoutPanel = new TableLayoutPanel();
        tableLayoutPanel.Dock = DockStyle.Fill;
        tableLayoutPanel.RowCount = ROWS;
        tableLayoutPanel.ColumnCount = COLS;

        // Настройка размеров ячеек
        for (int i = 0; i < ROWS; i++)
            tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 33.33F));
        for (int i = 0; i < COLS; i++)
            tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25));

        // Создание PictureBox для каждой карты
        for (int row = 0; row < ROWS; row++)
        {
            for (int col = 0; col < COLS; col++)
            {
                int index = row * COLS + col;
                cards[row, col] = CreatePictureBox(index);
                tableLayoutPanel.Controls.Add(cards[row, col], col, row);
            }
        }

        Controls.Add(tableLayoutPanel);
    }

    private PictureBox CreatePictureBox(int index)
    {
        PictureBox pictureBox = new PictureBox();
        pictureBox.Tag = index;
        pictureBox.Size = new Size(120, 120);
        pictureBox.SizeMode = PictureBoxSizeMode.StretchImage;
        pictureBox.BackColor = Color.LightGray;
        pictureBox.BorderStyle = BorderStyle.FixedSingle;
        pictureBox.Click += Card_Click;
        return pictureBox;
    }

    private void InitializeGame()
    {
        // Создание массива значений (6 пар)
        int[] pairs = { 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6 };
        
        // Перемешивание значений
        Random rand = new Random();
        for (int i = 0; i < values.Length; i++)
        {
            int randomIndex = rand.Next(values.Length);
            values[i] = pairs[randomIndex];
            pairs[randomIndex] = pairs[i];
        }
    }

    private void Card_Click(object sender, EventArgs e)
    {
        if (isProcessing) return;

        PictureBox clickedPictureBox = (PictureBox)sender;
        int index = (int)clickedPictureBox.Tag;

        if (firstSelected == -1)
        {
            firstSelected = index;
            ShowCard(clickedPictureBox);
        }
        else if (secondSelected == -1 && firstSelected != index)
        {
            secondSelected = index;
            ShowCard(clickedPictureBox);

            CheckMatch(firstSelected, secondIndex);
        }
    }

    private void ShowCard(PictureBox pictureBox)
    {
        // Отображаем карту с ресурсом paper
        pictureBox.Image = PaperImage;
    }

    private async void CheckMatch(int firstIndex, int secondIndex)
    {
        isProcessing = true;

        await Task.Delay(1000);

        if (values[firstIndex] == values[secondIndex])
        {
            foundPairs[values[firstIndex] - 1] = true;
            cards[firstIndex / COLS, firstIndex % COLS].Enabled = false;
            cards[secondIndex / COLS, secondIndex % COLS].Enabled = false;

            if (IsGameWon())
            {
                MessageBox.Show("Поздравляем! Вы выиграли!");
                ResetGame();
            }
        }
        else
        {
            HideCards(firstIndex, secondIndex);
        }

        firstSelected = -1;
        secondSelected = -1;
        isProcessing = false;
    }

    private void HideCards(int firstIndex, int secondIndex)
    {
        cards[firstIndex / COLS, firstIndex % COLS].Image = null;
        cards[secondIndex / COLS, secondIndex % COLS].Image = null;
    }

    private bool IsGameWon()
    {
        foreach (bool pairFound in foundPairs)
        {
            if (!pairFound) return false;
        }
        return true;
    }

    private void ResetGame()
    {
        InitializeGame();
        firstSelected = -1;
        secondSelected = -1;
        Array.Clear(foundPairs, 0, foundPairs.Length);

        for (int row = 0; row < ROWS; row++)
        {
            for (int col = 0; col < COLS; col++)
            {
                PictureBox pictureBox = cards[row, col];
                pictureBox.Image = null;
                pictureBox.Enabled = true;
            }
        }
    }

    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new MemoryGame());
    }
}


*******************
https://learn.microsoft.com/ru-ru/visualstudio/get-started/csharp/tutorial-windows-forms-create-match-game?view=vs-2022
https://vk.com/@math_oop-prakticheskaya-rabota-4
https://www.youtube.com/watch?v=_-4ldpQD9_E

https://www.youtube.com/watch?v=1Vh_buDuyAo (C# Tutorial Create a Memory Matching Game in Visual Studio)
